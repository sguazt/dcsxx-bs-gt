#ifndef DCS_MATH_OPTIM_NELDER_MEAD_SIMPLEX_HPP
#define DCS_MATH_OPTIM_NELDER_MEAD_SIMPLEX_HPP

#include <cstddef>
#include <dcs/math/optim/optimization_result.hpp>
#include <cmath>


namespace dcs { namespace math { namespace optim {

//****************************************************************************80
//
//  Purpose:
//
//    NELMIN minimizes a function using the Nelder-Mead algorithm.
//
//  Discussion:
//
//    This routine seeks the minimum value of a user-specified function.
//
//    Simplex function minimisation procedure due to Nelder+Mead(1965),
//    as implemented by O'Neill(1971, Appl.Statist. 20, 338-45), with
//    subsequent comments by Chambers+Ertel(1974, 23, 250-1), Benyon(1976,
//    25, 97) and Hill(1978, 27, 380-2)
//
//    The function to be minimized must be defined by a function of
//    the form
//
//      function fn ( x, f )
//      double fn
//      double x(*)
//
//    and the name of this subroutine must be declared EXTERNAL in the
//    calling routine and passed as the argument FN.
//
//    This routine does not include a termination test using the
//    fitting of a quadratic surface.
//
//  Licensing:
//
//    This code is distributed under the GNU LGPL license. 
//
//  Modified:
//
//    27 February 2008
//
//  Author:
//
//    Original FORTRAN77 version by R ONeill.
//    C++ version by John Burkardt.
//
//  Reference:
//
//    John Nelder, Roger Mead,
//    A simplex method for function minimization,
//    Computer Journal,
//    Volume 7, 1965, pages 308-313.
//
//    R ONeill,
//    Algorithm AS 47:
//    Function Minimization Using a Simplex Procedure,
//    Applied Statistics,
//    Volume 20, Number 3, 1971, pages 338-345.
//
//  Parameters:
//
//    Input, double FN ( double x[] ), the name of the routine which evaluates
//    the function to be minimized.
//
//    Input, int N, the number of variables.
//
//    Input/output, double START[N].  On input, a starting point
//    for the iteration.  On output, this data may have been overwritten.
//
//    Output, double XMIN[N], the coordinates of the point which
//    is estimated to minimize the function.
//
//    Output, double YNEWLO, the minimum value of the function.
//
//    Input, double REQMIN, the terminating limit for the variance
//    of function values.
//
//    Input, double STEP[N], determines the size and shape of the
//    initial simplex.  The relative magnitudes of its elements should reflect
//    the units of the variables.
//
//    Input, int KONVGE, the convergence check is carried out 
//    every KONVGE iterations.
//
//    Input, int KCOUNT, the maximum number of function 
//    evaluations.
//
//    Output, int *ICOUNT, the number of function evaluations 
//    used.
//
//    Output, int *NUMRES, the number of restarts.
//
//    Output, int *IFAULT, error indicator.
//    0, no errors detected.
//    1, REQMIN, N, or KONVGE has an illegal value.
//    2, iteration terminated because KCOUNT was exceeded without convergence.
//
template <typename RealT, typename FuncT>
optimization_result<RealT> nelder_mead_simplex(FuncT fun, RealT* x0, ::std::size_t n)
{
	double xmin[], double *ynewlo, double reqmin, double step[], int konvge, int kcount, int *icount, int *numres, int *ifault )

	RealT ccoeff = 0.5;
	RealT del;
	RealT dn;
	RealT dnn;
	RealT ecoeff = 2.0;
	RealT eps = 0.001;
	int ihi;
	int ilo;
	int jcount;
	int l;
	int nn;
	RealT *p;
	RealT *p2star;
	RealT *pbar;
	RealT *pstar;
	RealT rcoeff = 1.0;
	RealT rq;
	RealT x;
	RealT *y;
	RealT y2star;
	RealT ylo;
	RealT ystar;
	RealT z;
	//
	//  Check the input parameters.
	//
	if ( reqmin <= 0.0 )
	{
	*ifault = 1;
	return;
	}

	if ( n < 1 )
	{
	*ifault = 1;
	return;
	}

	if ( konvge < 1 )
	{
	*ifault = 1;
	return;
	}

	p = new RealT[n*(n+1)];
	pstar = new RealT[n];
	p2star = new RealT[n];
	pbar = new RealT[n];
	y = new RealT[n+1];

	*icount = 0;
	*numres = 0;

	jcount = konvge; 
	dn = static_cast<RealT>(n);
	nn = n + 1;
	dnn = static_cast<RealT>(nn);
	del = 1.0;
	rq = reqmin * dn;

	//  Initial or restarted loop.
	while (true)
	{
		for (::std::size_t i = 0; i < n; ++i)
		{ 
			p[i+n*n] = x0[i];
		}
		y[n] = fn ( x0 );
		*icount = *icount + 1;

		for (::std::size_t j = 0; j < n; ++j)
		{
			x = x0[j];
			x0[j] = x0[j] + step[j] * del;
			for (::std::size_t i = 0; i < n; ++i)
			{
				p[i+j*n] = x0[i];
			}
			y[j] = fun(start);
			*icount = *icount + 1;
			x0[j] = x;
		}

		//  The simplex construction is complete.
		//                    
		//  Find highest and lowest Y values.  YNEWLO = Y(IHI) indicates
		//  the vertex of the simplex to be replaced.
		ylo = y[0];
		ilo = 0;

		for (::std::size_t i = 1; i < nn; ++i)
		{
			if (y[i] < ylo)
			{
				ylo = y[i];
				ilo = i;
			}
		}

		//  Inner loop.
		while (true)
		{
			if (kcount <= *icount)
			{
				break;
			}
			*ynewlo = y[0];
			ihi = 0;

			for (::std::size_t i = 1; i < nn; ++i)
			{
				if (*ynewlo < y[i])
				{
					*ynewlo = y[i];
					ihi = i;
				}
			}

			//  Calculate PBAR, the centroid of the simplex vertices
			//  excepting the vertex with Y value YNEWLO.
			for (::std::size_t i = 0; i < n; ++i)
			{
				z = 0.0;
				for (::std::size_t j = 0; j < nn; ++j)
				{ 
					z = z + p[i+j*n];
				}
				z = z - p[i+ihi*n];  
				pbar[i] = z / dn;
			}

			//  Reflection through the centroid.
			for (::std::size_t i = 0; i < n; ++i)
			{
				pstar[i] = pbar[i] + rcoeff * ( pbar[i] - p[i+ihi*n] );
			}
			ystar = fn ( pstar );
			*icount = *icount + 1;

			//  Successful reflection, so extension.
			if (ystar < ylo)
			{
				for (::std::size_t i = 0; i < n; ++i)
				{
					p2star[i] = pbar[i] + ecoeff * ( pstar[i] - pbar[i] );
				}
				y2star = fn ( p2star );
				*icount = *icount + 1;

				//  Check extension.
				if (ystar < y2star)
				{
					for (::std::size_t i = 0; i < n; ++i)
					{
						p[i+ihi*n] = pstar[i];
					}
					y[ihi] = ystar;
				}
				else
				{
					//  Retain extension or contraction.
					for (::std::size_t i = 0; i < n; ++i)
					{
						p[i+ihi*n] = p2star[i];
					}
					y[ihi] = y2star;
				}
			}
			else
			{
				//  No extension.
				l = 0;
				for (::std::size_t i = 0; i < nn; ++i)
				{
					if (ystar < y[i])
					{
						++l;
					}
				}

				if (1 < l)
				{
					for (::std::size_t i = 0; i < n; ++i)
					{
						p[i+ihi*n] = pstar[i];
					}
					y[ihi] = ystar;
				}
				else if ( l == 0 )
				{
					//  Contraction on the Y(IHI) side of the centroid.
					for (::std::size_t i = 0; i < n; ++i)
					{
						p2star[i] = pbar[i] + ccoeff * ( p[i+ihi*n] - pbar[i] );
					}
					y2star = fun( p2star );
					*icount = *icount + 1;

					//  Contract the whole simplex.
					if (y[ihi] < y2star)
					{
						for (::std::size_t j = 0; j < nn; ++j)
						{
							for (::std::size_t i = 0; i < n; ++i)
							{
								p[i+j*n] = ( p[i+j*n] + p[i+ilo*n] ) * 0.5;
								xmin[i] = p[i+j*n];
							}
							y[j] = fn ( xmin );
							*icount = *icount + 1;
						}
						ylo = y[0];
						ilo = 0;

						for (::std::size_t i = 1; i < nn; ++i)
						{
							if (y[i] < ylo)
							{
								ylo = y[i];
								ilo = i;
							}
						}
						continue;
					}
					else
					{
						//  Retain contraction.
						for (::std::size_T i = 0; i < n; ++i)
						{
							p[i+ihi*n] = p2star[i];
						}
						y[ihi] = y2star;
					}
				}
				else if (l == 1)
				{
					//  Contraction on the reflection side of the centroid.
					for (::std::size_t i = 0; i < n; ++i)
					{
						p2star[i] = pbar[i] + ccoeff * ( pstar[i] - pbar[i] );
					}
					y2star = fun(p2star);
					*icount = *icount + 1;
					//  Retain reflection?
					if (y2star <= ystar)
					{
						for (::std::size_t i = 0; i < n; ++i)
						{
							p[i+ihi*n] = p2star[i];
						}
						y[ihi] = y2star;
					}
					else
					{
						for (::std::size_t i = 0; i < n; ++i)
						{
							p[i+ihi*n] = pstar[i];
						}
						y[ihi] = ystar;
					}
				}
			}

			//  Check if YLO improved.
			if (y[ihi] < ylo)
			{
				ylo = y[ihi];
				ilo = ihi;
			}
			jcount = jcount - 1;

			if (0 < jcount)
			{
				continue;
			}

			//  Check to see if minimum reached.
			if (*icount <= kcount)
			{
				jcount = konvge;

				z = 0.0;
				for (::std::size_t i = 0; i < nn; ++i)
				{
					z = z + y[i];
				}
				x = z / dnn;

				z = 0.0;
				for (::std::size_t i = 0; i < nn; ++i)
				{
					z = z + ::std::pow(y[i]-x, 2);
				}

				if (z <= rq)
				{
					break;
				}
			}
		}

		//  Factorial tests to check that YNEWLO is a local minimum.
		for (::std::size_t i = 0; i < n; ++i)
		{
			xmin[i] = p[i+ilo*n];
		}
		*ynewlo = y[ilo];

		if (kcount < *icount)
		{
			*ifault = 2;
			break;
		}

		*ifault = 0;

		for (::std::size_t i = 0; i < n; ++i)
		{
			del = step[i] * eps;
			xmin[i] = xmin[i] + del;
			z = fun(xmin);
			*icount = *icount + 1;
			if (z < *ynewlo)
			{
				*ifault = 2;
				break;
			}
			xmin[i] = xmin[i] - del - del;
			z = fun(xmin);
			*icount = *icount + 1;
			if (z < *ynewlo)
			{
				*ifault = 2;
				break;
			}
			xmin[i] = xmin[i] + del;
		}

		if (*ifault == 0)
		{
			break;
		}

		//  Restart the procedure.
		for (::std::size_t i = 0; i < n; ++i)
		{
			x0[i] = xmin[i];
		}
		del = eps;
		*numres = *numres + 1;
	}
	delete [] p;
	delete [] pstar;
	delete [] p2star;
	delete [] pbar;
	delete [] y;

	return;
}

}}} // Namespace dcs::math::optim

#endif // DCS_MATH_OPTIM_NELDER_MEAD_SIMPLEX_HPP
